struct UpgradeInfo
{
  int healthLevel;
  int damageLevel;
  int protectionLevel;
  int selfDamageLevel;
  int bulletAmmoLevel;
  int arAmmoLevel;
  int shellAmmoLevel;
  int rocketAmmoLevel;
  int cellAmmoLevel;
  int powerupDurationLevel;
}

class ProgressionHandler : EventHandler
{
  SecretTracker secretTracker;
  PlayerPawn plr;
  UpgradeInfo info;

  override void PlayerEntered(PlayerEvent e)
	{
    plr = players[e.PlayerNumber].mo;
    SetUpgradeInfo(plr);
	}

  override void WorldLoaded(WorldEvent e)
	{
    secretTracker = SecretTracker.Get();
		// Console.Printf("World loaded, total currency: %i", secretTracker.currency);
	}

  override void WorldUnloaded (WorldEvent e)
  {
    secretTracker.UpdateLevelStats();
  }

  override void WorldThingDied (WorldEvent e)
  {
    if (e.Thing.CountsAsKill())
    {
      int reward = CalculateReward(e.Thing.SpawnHealth());
      secretTracker.currency += reward;
      Console.Printf("Earned %i Boom Bucks!", reward);
    }
  }

  // enables communication with a menu
  override void NetworkProcess(ConsoleEvent e)
  {
    super.NetworkProcess(e);
    if (e.Name ~== "progression-open-menu")
    {
			Menu.SetMenu("progression_menu");
    }
    
    if (e.Name ~== "progression-purchase-health-upgrade")
    {
      PurchaseUpgrade("IncreaseMaxHealthInv", 2);
    }

    if (e.Name ~== "progression-purchase-dr-upgrade")
    {
      PurchaseUpgrade("DecreaseDamageReceivedInv", 2);
    }

    if (e.Name ~== "progression-purchase-bullet-upgrade")
    {
      PurchaseUpgrade("IncreaseBulletAmmoInv", 5);
    }

    if (e.Name ~== "progression-purchase-ar-upgrade")
    {
      PurchaseUpgrade("IncreaseArAmmoInv", 5);
    }

    if (e.Name ~== "progression-purchase-shell-upgrade")
    {
      PurchaseUpgrade("IncreaseShellAmmoInv", 5);
    }

    if (e.Name ~== "progression-purchase-rocket-upgrade")
    {
      PurchaseUpgrade("IncreaseRocketAmmoInv", 5);
    }

    if (e.Name ~== "progression-purchase-cell-upgrade")
    {
      PurchaseUpgrade("IncreaseCellAmmoInv", 5);
    }

    if (e.Name ~== "progression-purchase-di-upgrade")
    {
      PurchaseUpgrade("IncreaseMaxDamageInv", 2);
    }

    if (e.Name ~== "progression-purchase-sdr-upgrade")
    {
      PurchaseUpgrade("ReduceSelfExplosionDamage", 5);
    }

    if (e.Name ~== "progression-purchase-powerup-upgrade")
    {
      PurchaseUpgrade("IncreasePowerupDuration", 5);
    }
      

    SetUpgradeInfo(plr);
    // Console.Printf("NetworkProcess: %s", e.Name);
  }

  void SetUpgradeInfo(PlayerPawn player)
  {
    let health = player.FindInventory("IncreaseMaxHealthInv");
    if (health) info.healthLevel = health.amount;

    let damage = player.FindInventory("IncreaseMaxDamageInv");
    if (damage) info.damageLevel = damage.amount;

    let protection = player.FindInventory("DecreaseDamageReceivedInv");
    if (protection) info.protectionLevel = protection.amount;
    
    let bulletAmmo = player.FindInventory("IncreaseBulletAmmoInv");
    if (bulletAmmo) info.bulletAmmoLevel = bulletAmmo.amount;

    let arAmmo = player.FindInventory("IncreaseArAmmoInv");
    if (arAmmo) info.arAmmoLevel = arAmmo.amount;

    let shellAmmo = player.FindInventory("IncreaseShellAmmoInv");
    if (shellAmmo) info.shellAmmoLevel = shellAmmo.amount;

    let rocketAmmo = player.FindInventory("IncreaseRocketAmmoInv");
    if (rocketAmmo) info.rocketAmmoLevel = rocketAmmo.amount;
 
    let cellAmmo = player.FindInventory("IncreaseCellAmmoInv");
    if (cellAmmo) info.cellAmmoLevel = cellAmmo.amount;

    let selfDamage = player.FindInventory("ReduceSelfExplosionDamage");
    if (selfDamage) info.selfDamageLevel = selfDamage.amount;

    let powerupDuration = player.FindInventory("IncreasePowerupDuration");
    if (powerupDuration) info.powerupDurationLevel = powerupDuration.amount;
  }

  int CalculateReward(int spawnHealth)
  {

    if (spawnHealth <= 200) return 1;
    if (spawnHealth <= 500) return 2;
    if (spawnHealth <= 1000) return 3;
    if (spawnHealth <= 2000) return 6;
    if (spawnHealth > 2000) return 10;
    return 0;
  }

  void PurchaseUpgrade(String inv, int padding = 1)
  {
    let item = plr.FindInventory(inv);

    if (!item)
    {
      if (secretTracker.currency < (10 * padding))
      {
        // Console.Printf("Not enough currency to purchase upgrade");
        Menu.SetMenu("insufficient_currency");
        return;
      }

      secretTracker.currency -= (10 * padding);
      plr.A_GiveInventory(inv, 1);
      return;
    }

    // Console.Printf("Item found, item amount %i", item.amount);
    int level = item.amount;
    int currencyRequired = 10 * ((level + 1) * padding);
    if (currencyRequired > secretTracker.currency)
    {
      // Console.Printf("Not enough currency to purchase upgrade");
      Menu.SetMenu("insufficient_currency");
      return;
    }

    if (level == item.maxamount)
    {
      // Console.Printf("You reached max level in this upgrade");
      Menu.SetMenu("max_upgrade_level");
      return;
    }

    secretTracker.currency -= currencyRequired;
    plr.A_GiveInventory(inv);
    Console.Printf("Purchased upgrade %s, item level: %i, max level: %i", inv, item.amount, item.maxamount);
  }
}