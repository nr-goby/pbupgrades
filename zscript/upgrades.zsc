class IncreaseMaxHealthInv : Inventory
{
  int healthIncrease;

  property healthIncrease : healthIncrease;

  Default
  {
    IncreaseMaxHealthInv.healthIncrease 10;
    Inventory.maxamount 5;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override bool HandlePickup (Inventory item)
  {
    if(item.GetClass() != GetClass()) return false;
    if (amount >= maxamount)
    {
      Console.Printf("Max Upgrade Reached, Shouldn't be able to pick up anymore!");
      return true;
    }
    bool isGood = super.HandlePickup(item);
    setMaxHealth();

    return isGood;
  }

  override void AttachToOwner(Actor toucher)
  {
    super.AttachToOwner(toucher);
    setMaxHealth();
  }

  void setMaxHealth()
  {
    PlayerPawn plr = PlayerPawn(Owner);
    if (!plr)
    {
      Console.Printf("No Owner!");
      return;
    }

    int initialHealth = 100;
    int totalHealth = initialHealth + (healthIncrease * amount);

    plr.MaxHealth = totalHealth;

    Console.Printf("Player Max Health: %i", plr.MaxHealth);
  }
}

class IncreaseMaxDamageInv : Inventory
{
  double damageIncrease;
  double totalDamageIncrease;

  property damageIncrease : damageIncrease;

  Default
  {
    IncreaseMaxDamageInv.damageIncrease 0.05;
    Inventory.maxamount 10;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!passive && damage > 0)
		{
      // Console.Printf("Damage Flag: %i", flags);
      // Console.Printf("Old Damage Dealt: %i", damage);
      // Console.Printf("Inventory amount: %i", amount);
      totalDamageIncrease = (damageIncrease * amount) + 1;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * totalDamageIncrease));
      // Console.Printf("New Damage Dealt: %i", newdamage);
			if (Owner != null && newdamage > damage) Owner.A_StartSound(ActiveSound, CHAN_AUTO, CHANF_DEFAULT, 1.0, ATTN_NONE);
		}
	}
}

class DecreaseDamageReceivedInv : Inventory
{
  double damageDecrease;
  double totalDamageDecrease;

  property damageDecrease : damageDecrease;

  Default
  {
    DecreaseDamageReceivedInv.damageDecrease 0.05;
    Inventory.maxamount 10;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && damage > 0)
		{
      // Console.Printf("Old Damage Dealt: %i", damage);
      // Console.Printf("Inventory amount: %i", amount);
      // Console.Printf("Inflictor: %s", inflictor.GetClassName());
      totalDamageDecrease = 1 - (damageDecrease * amount);
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * totalDamageDecrease));
      // Console.Printf("New Damage Dealt: %i", newdamage);
			if (Owner != null && newdamage > damage) Owner.A_StartSound(ActiveSound, CHAN_AUTO, CHANF_DEFAULT, 1.0, ATTN_NONE);
		}
	}

}

// super class for ammo increases
class IncreaseAmmoInv : Inventory
{
  int ammoIncrease;
  int initialMaxAmmo;
  string ammoClass;
  string ammoName;
  int totalAmmoAmount;
  int totalBackpackAmmoAmount;

  property ammoIncrease : ammoIncrease;
  property initialMaxAmmo : initialMaxAmmo;
  property ammoClass : ammoClass;
  property ammoName : ammoName;

  Default
  {
    IncreaseAmmoInv.ammoIncrease 0;
    IncreaseAmmoInv.initialMaxAmmo 0;
    IncreaseAmmoInv.ammoClass "";
    IncreaseAmmoInv.ammoName "";
    Inventory.amount 1;
    Inventory.maxamount 2;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override bool HandlePickup (Inventory item)
  {
    let ammoPickup = Ammo(item);
    if (ammoPickup) setMaxAmmo();

    if(item.GetClass() != GetClass()) return false;
    // Console.Printf("Pickup Called, Inventory name: %s, Inventory Amount: %i, Max Inventory Amount: %i", item.GetClassName(), amount, maxamount);
    if (amount >= maxamount)
    {
      // Console.Printf("Max Upgrade Reached, Shouldn't be able to pick up anymore!");
      return true;
    }

    bool isGood = super.HandlePickup(item);
    // Console.Printf("Pickup Successful");
    // Console.Printf("New Inventory Amount: %i", amount);
    setMaxAmmo();

    return isGood;
  }

  override void AttachToOwner(Actor toucher)
  {
    super.AttachToOwner(toucher);
    // Console.Printf("Attach Called, Inventory name: %s Inventory Amount: %i", GetClassName(), amount);
    setMaxAmmo();
  }

  // TODO: possibly refactor with SetAmmoCapacity
  void setMaxAmmo()
  {
    let plr = Owner;
    if (!plr) return;

    Ammo ammoInv = Ammo(plr.FindInventory(ammoClass));

    if (!ammoInv) return;

    if (ammoInv)
    {
      // Console.Printf("%s Amount: %i", ammoName, ammoInv.Amount);
      // Console.Printf("Old Max %s Amount: %i", ammoName, ammoInv.MaxAmount);
      // Console.Printf("Old Max %s Amount (backpack): %i", ammoName, ammoInv.BackpackMaxAmount);
      
      
      int initialMaxAmount = initialMaxAmmo;
      int totalAmmoIncrease = ammoIncrease * amount;
      
      if(initialMaxAmount == ammoInv.BackpackMaxAmount)
      {
        ammoInv.MaxAmount = initialMaxAmount + (totalAmmoIncrease * 2);
        ammoInv.BackpackMaxAmount = ammoInv.MaxAmount;
      }
      else
      {
        ammoInv.MaxAmount = initialMaxAmount + totalAmmoIncrease;
        ammoInv.BackpackMaxAmount = (initialMaxAmount * 2) + (totalAmmoIncrease * 2);
        if (plr.FindInventory("Backpack",true)) ammoInv.MaxAmount = ammoInv.BackpackMaxAmount;
      }

      totalAmmoAmount = ammoInv.MaxAmount;
      totalBackpackAmmoAmount = ammoInv.BackpackMaxAmount;

      // Console.Printf("New Max %s Amount: %i", ammoName, ammoInv.MaxAmount);
      // Console.Printf("New Max %s Amount (backpack): %i", ammoName, ammoInv.BackpackMaxAmount);
    }
  }
}

class IncreaseBulletAmmoInv : IncreaseAmmoInv
{
  Default
  {
    IncreaseAmmoInv.ammoIncrease 50;
    IncreaseAmmoInv.initialMaxAmmo 200;
    IncreaseAmmoInv.ammoClass "PB_LowCalMag";
    IncreaseAmmoInv.ammoName "Low Caliber Bullet";
  }
}

class IncreaseArAmmoInv : IncreaseAmmoInv
{
  Default
  {
    IncreaseAmmoInv.ammoIncrease 50;
    IncreaseAmmoInv.initialMaxAmmo 300;
    IncreaseAmmoInv.ammoClass "PB_HighCalMag";
    IncreaseAmmoInv.ammoName "High Caliber Bullet";
    Inventory.maxamount 2;
  }
}

class IncreaseShellAmmoInv : IncreaseAmmoInv
{
  Default
  {
    IncreaseAmmoInv.ammoIncrease 10;
    IncreaseAmmoInv.initialMaxAmmo 50;
    IncreaseAmmoInv.ammoClass "PB_Shell";
    IncreaseAmmoInv.ammoName "Shell";
  }
}

class IncreaseRocketAmmoInv : IncreaseAmmoInv
{
  Default
  {
    IncreaseAmmoInv.ammoIncrease 10;
    IncreaseAmmoInv.initialMaxAmmo 50;
    IncreaseAmmoInv.ammoClass "PB_RocketAmmo";
    IncreaseAmmoInv.ammoName "Rocket";
  }
}

class IncreaseCellAmmoInv : IncreaseAmmoInv
{
  Default
  {
    IncreaseAmmoInv.ammoIncrease 50;
    IncreaseAmmoInv.initialMaxAmmo 300;
    IncreaseAmmoInv.ammoClass "PB_Cell";
    IncreaseAmmoInv.ammoName "Cell";
  }
}

// Reduces self damage from rockets
class ReduceSelfExplosionDamage : Inventory
{
  double rocketDamageDecrease;

  property rocketDamageDecrease : rocketDamageDecrease;

  Default
  {
    ReduceSelfExplosionDamage.rocketDamageDecrease 0.25;
    Inventory.maxamount 2;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
    if (!passive || damage <= 0 || flags != DMG_EXPLOSION) return;

    // Console.Printf("Inflictor: %s", inflictor.GetClassName());
    // Console.Printf("Source: %s", source.GetClassName());
    // Console.Printf("Flags: %i", flags);
    // Console.Printf("Inventory amount: %i", amount);
    // Console.Printf("Old Damage Dealt: %i", damage);

    if(source is "PB_PlayerPawn")
    {
      double totalDamageDecrease = 1 - (rocketDamageDecrease * amount);
      // Console.Printf("Self Damage modifier: %.2f", totalDamageDecrease);
      // Console.Printf("Old Damage Dealt: %i", damage);
      // Console.Printf("Inventory amount: %i", amount);
			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * totalDamageDecrease));
      // Console.Printf("New Damage Dealt: %i", newdamage);
			if (Owner != null && newdamage > damage) Owner.A_StartSound(ActiveSound, CHAN_AUTO, CHANF_DEFAULT, 1.0, ATTN_NONE);
    }
	}
}


class IncreasePowerupDuration : Inventory
{
  double powerupDurationIncrease;
  double totalPowerupDurationIncrease;

  property powerupDurationIncrease : powerupDurationIncrease;

  Default
  {
    IncreasePowerupDuration.powerupDurationIncrease 0.25;
    Inventory.maxamount 4;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override bool HandlePickup (Inventory item)
  {
    let power = Powerup(item);
    
    if (power)
    {
      // Console.Printf("Old Powerup Duration: %i", power.EffectTics);
      double durationMultipler = 1 + (powerupDurationIncrease * amount);
      power.EffectTics = power.EffectTics * durationMultipler;
      // Console.Printf("New Powerup Duration: %i", power.EffectTics);
    }

    bool isGood = super.HandlePickup(item);
    return isGood;
  }
}

class HealthRegenUpgrade : Inventory
{
  int regenTimeCounter;
  int regenLimit;

  property regenTimeCounter : regenTimeCounter;
  property regenLimit : regenLimit;

  Default
  {
    HealthRegenUpgrade.regenTimeCounter 0;
    HealthRegenUpgrade.regenLimit 50;
    Inventory.maxamount 2;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override void DoEffect()
  {
    if (regenTimeCounter < 175)
    {
      regenTimeCounter++;
      return;
    }

    int maxHealthLimit = regenLimit * amount;
    let plr = PlayerPawn(Owner);
    if (!plr) return;

    if (plr.Health >= maxHealthLimit)
    {
      regenTimeCounter = 0;
      return;
    }

    plr.GiveBody(5, maxHealthLimit);
    regenTimeCounter = 0;
    return;
  }
}

class ArmorRegenUpgrade : Inventory
{
  int regenTimeCounter;
  int regenLimit;

  property regenTimeCounter : regenTimeCounter;
  property regenLimit : regenLimit;

  Default
  {
    ArmorRegenUpgrade.regenTimeCounter 0;
    ArmorRegenUpgrade.regenLimit 25;
    Inventory.maxamount 2;
    +INVENTORY.PERSISTENTPOWER;
    +INVENTORY.UNDROPPABLE;
  }

  override void DoEffect()
  {
    if (regenTimeCounter < 175)
    {
      regenTimeCounter++;
      return;
    }

    int maxArmorLimit = regenLimit * amount;
    let plr = PlayerPawn(Owner);
    if (!plr) return;

    let playerArmor = BasicArmor(plr.FindInventory("BasicArmor"));

    // shouldn't be possible to find no armor
    if (!playerArmor) return;

    // prevents 0 save percent bug when player armor is 0
    if (playerArmor.amount == 0)
    {
      // Console.Printf("No Armor!");
      // Project Brutality Armor Bonus
      plr.A_GiveInventory("GiveArmor");
      playerArmor.amount += 4;
      regenTimeCounter = 0;
      return;
    }

    if (playerArmor.amount >= maxArmorLimit)
    {
      // Console.Printf("Max Armor Regen Reached! Armor Amount: %i", playerArmor.amount);
      regenTimeCounter = 0;
      return;
    }
    
    if (playerArmor.amount < maxArmorLimit)
    {
      // Console.Printf("Armor Found! Armor Amount: %i", playerArmor.amount);
      if (playerArmor.amount + 5 > maxArmorLimit)
      {
        playerArmor.amount = maxArmorLimit;
        regenTimeCounter = 0;
        return;
      }

      playerArmor.amount += 5;
      regenTimeCounter = 0;
      return;
    }

    regenTimeCounter = 0;
    return;
  }
}